{"ast":null,"code":"import { createElement, Component } from 'react';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar styles = {\n  \"funnel-pipeline-chart\": \"_1WnkD\",\n  \"funnel-pipeline-chart-row\": \"_1JWHC\",\n  \"funnel-pipeline-chart-title\": \"_3tM6f\"\n};\nvar initialState = {};\n\nvar FunnelChart = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(FunnelChart, _React$Component);\n\n  function FunnelChart(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = initialState;\n    return _this;\n  }\n\n  var _proto = FunnelChart.prototype;\n\n  _proto.setFunnelRows = function setFunnelRows() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        data = _this$props.data,\n        showNames = _this$props.showNames,\n        showValues = _this$props.showValues,\n        showRunningTotal = _this$props.showRunningTotal,\n        heightRelativeToValue = _this$props.heightRelativeToValue,\n        chartHeight = _this$props.chartHeight,\n        getRowStyle = _this$props.getRowStyle,\n        getRowNameStyle = _this$props.getRowNameStyle,\n        getRowValueStyle = _this$props.getRowValueStyle,\n        getToolTip = _this$props.getToolTip,\n        onRowClick = _this$props.onRowClick;\n    var rows = [];\n    var totalValue = this.getTotalValue();\n    var sizePerValue = 0;\n\n    if (heightRelativeToValue && totalValue > 0) {\n      var totalHeight = chartHeight;\n\n      if (!totalHeight) {\n        totalHeight = 500;\n\n        if (window.innerWidth < 500) {\n          totalHeight = 300;\n        }\n      }\n\n      sizePerValue = totalHeight / totalValue;\n    }\n\n    var runningTotal = totalValue;\n\n    if (data) {\n      var _loop = function _loop() {\n        var thisRow = data[i1];\n        var showTitle = true;\n        var showValue = true;\n\n        if (thisRow.value > 0) {\n          var rowStyle = {};\n          var rowTitleStyle = {};\n          var rowValueStyle = {};\n\n          if (typeof getRowStyle === 'function') {\n            rowStyle = getRowStyle(thisRow);\n          }\n\n          if (typeof getRowNameStyle === 'function') {\n            rowTitleStyle = getRowNameStyle(thisRow);\n          }\n\n          if (typeof getRowValueStyle === 'function') {\n            rowValueStyle = getRowValueStyle(thisRow);\n          }\n\n          if (heightRelativeToValue) {\n            var size = sizePerValue * thisRow.value;\n            rowStyle.height = size + 'px';\n            rowStyle.maxHeight = size + 'px';\n\n            if (size < 65) {\n              showValue = false;\n            }\n\n            if (size < 40) {\n              showTitle = false;\n            }\n          }\n\n          if (thisRow.backgroundColor) {\n            rowStyle.backgroundColor = thisRow.backgroundColor;\n          }\n\n          if (!rowStyle.backgroundColor) {\n            rowStyle.backgroundColor = _this2.props.pallette[i1 % _this2.props.pallette.length];\n          }\n\n          if (!showNames) {\n            showTitle = false;\n          }\n\n          if (!showValues) {\n            showValue = false;\n          }\n\n          var toolTip = thisRow.name + '\\n' + runningTotal;\n\n          if (typeof getToolTip === 'function') {\n            toolTip = getToolTip(thisRow);\n          }\n\n          if (typeof onRowClick === 'function') {\n            rowStyle.cursor = 'pointer';\n          }\n\n          rows.push(createElement(\"div\", {\n            key: 'funnel-pipeline-chart-row-' + thisRow.name,\n            className: styles['funnel-pipeline-chart-row'],\n            style: rowStyle,\n            title: toolTip,\n            onClick: typeof onRowClick === 'function' ? function () {\n              return onRowClick(thisRow);\n            } : undefined\n          }, createElement(\"div\", null, showTitle ? createElement(\"div\", {\n            className: styles['funnel-pipeline-chart-title'],\n            style: rowTitleStyle\n          }, thisRow.name) : null, showValue ? createElement(\"div\", {\n            className: styles['funnel-pipeline-chart-value'],\n            style: rowValueStyle\n          }, showRunningTotal ? runningTotal : thisRow.value) : null)));\n        }\n\n        runningTotal = runningTotal - thisRow.value;\n      };\n\n      for (var i1 = 0; i1 < data.length; i1++) {\n        _loop();\n      }\n    }\n\n    return rows;\n  };\n\n  _proto.getTotalValue = function getTotalValue() {\n    var data = this.props.data;\n    var dataTotal = 0;\n\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        dataTotal += data[i1].value;\n      }\n    }\n\n    return dataTotal;\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        title = _this$props2.title,\n        style = _this$props2.style;\n    var chartStyles = {};\n\n    if (style) {\n      Object.assign(chartStyles, style);\n    }\n\n    if (this.props.chartWidth) {\n      chartStyles.maxWidth = this.props.chartWidth;\n    }\n\n    return createElement(\"div\", {\n      className: styles['funnel-pipeline-chart'],\n      style: chartStyles\n    }, title ? createElement(\"h2\", {\n      style: {\n        marginBottom: '30px'\n      }\n    }, title) : null, this.setFunnelRows());\n  };\n\n  return FunnelChart;\n}(Component);\n\nFunnelChart.defaultProps = {\n  showValues: true,\n  showNames: true,\n  pallette: ['#f14c14', '#f39c35', '#68BC00', '#1d7b63', '#4e97a8', '#4466a3'],\n  showRunningTotal: false,\n  heightRelativeToValue: false\n};\nexport { FunnelChart };","map":{"version":3,"sources":["../src/FunnelChart.tsx"],"names":["initialState","FunnelChart","React","showValues","showNames","pallette","showRunningTotal","heightRelativeToValue","setFunnelRows","data","chartHeight","getRowStyle","getRowNameStyle","getRowValueStyle","getToolTip","onRowClick","props","rows","totalValue","sizePerValue","totalHeight","window","runningTotal","i1","thisRow","showTitle","showValue","rowStyle","rowTitleStyle","rowValueStyle","size","toolTip","key","name","className","styles","style","title","onClick","undefined","getTotalValue","dataTotal","render","chartStyles","Object","marginBottom"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\n\ninterface IFunnelChartProps {\n  data: any\n  title?: string\n  showValues: boolean\n  showNames: boolean\n  pallette: string[]\n  showRunningTotal: boolean\n  heightRelativeToValue: boolean\n  chartHeight?: number\n  chartWidth?: number\n  style?: any\n  getRowStyle?: (row: any) => any\n  getRowNameStyle?: (row: any) => any\n  getRowValueStyle?: (row: any) => any\n  getToolTip?: (row: any) => string\n  onRowClick?: (row: any) => void\n}\n\ninterface IFunnelChartState {}\n\nconst initialState: IFunnelChartState = {}\n\nclass FunnelChart extends React.Component<\n  IFunnelChartProps,\n  IFunnelChartState\n> {\n  static defaultProps = {\n    showValues: true,\n    showNames: true,\n    pallette: [\n      '#f14c14',\n      '#f39c35',\n      '#68BC00',\n      '#1d7b63',\n      '#4e97a8',\n      '#4466a3'\n    ],\n    showRunningTotal: false,\n    heightRelativeToValue: false\n  }\n\n  constructor(props: IFunnelChartProps) {\n    super(props)\n    this.state = initialState\n  }\n\n  setFunnelRows() {\n    const {\n      data,\n      showNames,\n      showValues,\n      showRunningTotal,\n      heightRelativeToValue,\n      chartHeight,\n      getRowStyle,\n      getRowNameStyle,\n      getRowValueStyle,\n      getToolTip,\n      onRowClick\n    } = this.props\n    const rows = []\n    const totalValue = this.getTotalValue()\n\n    let sizePerValue = 0\n    if (heightRelativeToValue && totalValue > 0) {\n      let totalHeight = chartHeight\n      if (!totalHeight) {\n        totalHeight = 500\n        if (window.innerWidth < 500) {\n          totalHeight = 300\n        }\n      }\n      sizePerValue = totalHeight / totalValue\n    }\n\n    var runningTotal = totalValue\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        const thisRow = data[i1]\n        let showTitle = true\n        let showValue = true\n\n        if (thisRow.value > 0) {\n          let rowStyle: any = {}\n          let rowTitleStyle: any = {}\n          let rowValueStyle: any = {}\n\n          if (typeof getRowStyle === 'function') {\n            rowStyle = getRowStyle(thisRow)\n          }\n          if (typeof getRowNameStyle === 'function') {\n            rowTitleStyle = getRowNameStyle(thisRow)\n          }\n          if (typeof getRowValueStyle === 'function') {\n            rowValueStyle = getRowValueStyle(thisRow)\n          }\n\n          if (heightRelativeToValue) {\n            const size = sizePerValue * thisRow.value\n            rowStyle.height = size + 'px'\n            rowStyle.maxHeight = size + 'px'\n            if (size < 65) {\n              showValue = false\n            }\n            if (size < 40) {\n              showTitle = false\n            }\n          }\n          if (thisRow.backgroundColor) {\n            rowStyle.backgroundColor = thisRow.backgroundColor\n          }\n          if (!rowStyle.backgroundColor) {\n            rowStyle.backgroundColor = this.props.pallette[\n              i1 % this.props.pallette.length\n            ]\n          }\n\n          if (!showNames) {\n            showTitle = false\n          }\n          if (!showValues) {\n            showValue = false\n          }\n\n          let toolTip = thisRow.name + '\\n' + runningTotal\n          if (typeof getToolTip === 'function') {\n            toolTip = getToolTip(thisRow)\n          }\n\n          if (typeof onRowClick === 'function') {\n            rowStyle.cursor = 'pointer'\n          }\n\n          rows.push(\n            <div\n              key={'funnel-pipeline-chart-row-' + thisRow.name}\n              className={styles['funnel-pipeline-chart-row']}\n              style={rowStyle}\n              title={toolTip}\n              onClick={\n                typeof onRowClick === 'function'\n                  ? () => onRowClick(thisRow)\n                  : undefined\n              }\n            >\n              <div>\n                {showTitle ? (\n                  <div\n                    className={styles['funnel-pipeline-chart-title']}\n                    style={rowTitleStyle}\n                  >\n                    {thisRow.name}\n                  </div>\n                ) : null}\n                {showValue ? (\n                  <div\n                    className={styles['funnel-pipeline-chart-value']}\n                    style={rowValueStyle}\n                  >\n                    {showRunningTotal ? runningTotal : thisRow.value}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          )\n        }\n\n        runningTotal = runningTotal - thisRow.value\n      }\n    }\n\n    return rows\n  }\n\n  getTotalValue() {\n    const { data } = this.props\n\n    let dataTotal = 0\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        dataTotal += data[i1].value\n      }\n    }\n\n    return dataTotal\n  }\n\n  render() {\n    const { title, style } = this.props\n\n    const chartStyles: any = {}\n    if (style) {\n      Object.assign(chartStyles, style)\n    }\n    if (this.props.chartWidth) {\n      chartStyles.maxWidth = this.props.chartWidth\n    }\n\n    return (\n      <div className={styles['funnel-pipeline-chart']} style={chartStyles}>\n        {title ? <h2 style={{ marginBottom: '30px' }}>{title}</h2> : null}\n        {this.setFunnelRows()}\n      </div>\n    )\n  }\n}\n\nexport default FunnelChart\n"]},"metadata":{},"sourceType":"module"}