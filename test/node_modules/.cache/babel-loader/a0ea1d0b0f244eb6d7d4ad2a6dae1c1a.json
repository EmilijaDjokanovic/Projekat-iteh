{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\milos\\\\Desktop\\\\Faks\\\\test\\\\test\\\\src\\\\Components\\\\Pages\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport \"../../styles/Page.css\";\nimport isEqual from \"lodash.isequal\";\nimport Tabela from \"../Tabela\";\nimport ManagerTable from \"../ManagerTable\";\nimport { Link } from \"react-router-dom\";\nimport TextColumnFilter from \"../TextColumnFilter\";\nimport SelectColumnFilter from \"../SelectStageColumnFilter\";\nimport DateColumnFilter from \"../DateColumnFilter\";\nimport { ReactTableDefaults } from \"react-table\";\nimport SelectStageColumnFilter from \"../SelectStageColumnFilter\";\nimport SelectContactColumnFilter from \"../SelectContactColumnFilter\";\nimport { FunnelChart } from \"react-funnel-pipeline\";\nimport \"react-funnel-pipeline/dist/index.css\";\nimport { DateTime } from \"luxon\";\nimport { Button } from \"react-bootstrap\";\nimport EditContact from \"./EditContact\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst employeeColumns = [{\n  Header: \"Stage\",\n  accessor: \"stage\",\n  Filter: SelectStageColumnFilter\n}, {\n  Header: \"First name\",\n  accessor: \"first_name\",\n  Filter: TextColumnFilter\n}, {\n  Header: \"Last name\",\n  accessor: \"last_name\",\n  Filter: TextColumnFilter\n}, {\n  Header: \"Title\",\n  accessor: \"title\",\n  Filter: TextColumnFilter\n}, {\n  Header: \"Phone\",\n  accessor: \"phone\",\n  Filter: TextColumnFilter\n}, {\n  Header: \"Email\",\n  accessor: \"email\",\n  Filter: TextColumnFilter\n}, {\n  Header: \"Contact method\",\n  accessor: \"contact_method\",\n  Filter: SelectContactColumnFilter\n}, {\n  Header: \"Company\",\n  accessor: \"company\",\n  Filter: TextColumnFilter\n}, {\n  Header: \"Deal size\",\n  accessor: \"deal_size\",\n  //  accessor: (originalRow) =>{ console.log(originalRow); return DateTime.fromFormat(originalRow.follow_up_date, 'yyyy-MM-dd HH:mm:ss').toMillis() },\n  // Cell: ({value}) => DateTime.fromFormat(value, 'yyyy-MM-dd HH:mm:ss').toFormat('dd/MM/yyyy'),\n  Filter: DateColumnFilter\n}, {\n  Header: \"Follow Up Date\",\n  accessor: \"follow_up_date\",\n  //  accessor: (originalRow) =>{ console.log(originalRow); return DateTime.fromFormat(originalRow.follow_up_date, 'yyyy-MM-dd HH:mm:ss').toMillis() },\n  Cell: ({\n    value\n  }) => DateTime.fromFormat(value, \"yyyy-MM-dd HH:mm:ss\").toFormat(\"dd/MM/yyyy\"),\n  Filter: DateColumnFilter\n}, {\n  Header: \"Edit contact\",\n  accessor: \"edit_contact\",\n  //  accessor: (originalRow) =>{ console.log(originalRow); return DateTime.fromFormat(originalRow.follow_up_date, 'yyyy-MM-dd HH:mm:ss').toMillis() },\n  Cell: ({\n    value\n  }) => /*#__PURE__*/_jsxDEV(Link, {\n    to: \"/EditContact/1\",\n    children: \"Edit\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 26\n  }, this),\n  Filter: DateColumnFilter\n}];\nconst managerColumns = [{\n  Header: \"Name\",\n  accessor: \"name\"\n}, {\n  Header: \"Email\",\n  accessor: \"email\"\n}, {\n  Header: \"Role\",\n  accessor: \"role\"\n}, {\n  Header: \"Status\",\n  accessor: \"status\"\n}]; //[\n// {\n//     Header: 'Leads',\n//     columns:\n\nconst Dashboard = ({\n  stages,\n  contacts,\n  role,\n  staff\n}) => {\n  _s();\n\n  const [staffContacts, setStaffContacts] = useState([]);\n  let table;\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    console.log(role);\n\n    if (role !== \"\" && role !== \"manager\") {\n      const staffId = window.localStorage.getItem(\"staff_id\");\n      let filter = contacts.filter(e => e.staff_id == staffId);\n\n      if (!isEqual(filter, staffContacts)) {\n        const data = filter.reduce((acumulator, currentValue) => {\n          const oldValue = acumulator[currentValue.stage] || 0;\n          return { ...acumulator,\n            [currentValue.stage]: oldValue + currentValue.deal_size\n          };\n        }, {});\n        console.log(data);\n        const chartDataArray = Object.keys(data).map(key => ({\n          name: key,\n          value: data[key]\n        })); //  console.log(chartDataArray);\n\n        setChartData(chartDataArray);\n        setStaffContacts(filter);\n      }\n    } else if (role === \"manager\") {\n      console.log(contacts); //   const data = staff.reduce((acumulator, currentValue) => {\n      //     const oldValue = acumulator[currentValue.stage] || 0;\n      //     return {\n      //       ...acumulator,\n      //       [currentValue.stage]: oldValue + currentValue.deal_size,\n      //     };\n      //   }, {});\n      //   console.log(data);\n      //   const chartDataArray = Object.keys(data).map((key) => ({\n      //     name: key,\n      //     value: data[key],\n      //   }));\n      //   console.log(contacts);\n      //   setChartData(chartDataArray);\n      //  setStaffContacts(filter);\n    }\n  }, [chartData, contacts, role, staffContacts, stages]);\n\n  if (role !== \"\" && role === \"manager\") {\n    table = /*#__PURE__*/_jsxDEV(ManagerTable, {\n      columns: managerColumns,\n      data: staff\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (role !== \"\" && role !== \"manager\") {\n    table = /*#__PURE__*/_jsxDEV(Tabela, {\n      columns: employeeColumns,\n      data: staffContacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(FunnelChart, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), table]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"rh1nNneKO16xrXk7jjnztDweIho=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/milos/Desktop/Faks/test/test/src/Components/Pages/Dashboard.js"],"names":["React","useState","useEffect","useMemo","isEqual","Tabela","ManagerTable","Link","TextColumnFilter","SelectColumnFilter","DateColumnFilter","ReactTableDefaults","SelectStageColumnFilter","SelectContactColumnFilter","FunnelChart","DateTime","Button","EditContact","employeeColumns","Header","accessor","Filter","Cell","value","fromFormat","toFormat","managerColumns","Dashboard","stages","contacts","role","staff","staffContacts","setStaffContacts","table","chartData","setChartData","console","log","staffId","window","localStorage","getItem","filter","e","staff_id","data","reduce","acumulator","currentValue","oldValue","stage","deal_size","chartDataArray","Object","keys","map","key","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport \"../../styles/Page.css\";\r\nimport isEqual from \"lodash.isequal\";\r\nimport Tabela from \"../Tabela\";\r\nimport ManagerTable from \"../ManagerTable\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextColumnFilter from \"../TextColumnFilter\";\r\nimport SelectColumnFilter from \"../SelectStageColumnFilter\";\r\nimport DateColumnFilter from \"../DateColumnFilter\";\r\nimport { ReactTableDefaults } from \"react-table\";\r\nimport SelectStageColumnFilter from \"../SelectStageColumnFilter\";\r\nimport SelectContactColumnFilter from \"../SelectContactColumnFilter\";\r\nimport { FunnelChart } from \"react-funnel-pipeline\";\r\nimport \"react-funnel-pipeline/dist/index.css\";\r\nimport { DateTime } from \"luxon\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport EditContact from \"./EditContact\";\r\n\r\nconst employeeColumns = [\r\n  {\r\n    Header: \"Stage\",\r\n    accessor: \"stage\",\r\n    Filter: SelectStageColumnFilter,\r\n  },\r\n  {\r\n    Header: \"First name\",\r\n    accessor: \"first_name\",\r\n    Filter: TextColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Last name\",\r\n    accessor: \"last_name\",\r\n    Filter: TextColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Title\",\r\n    accessor: \"title\",\r\n    Filter: TextColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Phone\",\r\n    accessor: \"phone\",\r\n    Filter: TextColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Email\",\r\n    accessor: \"email\",\r\n    Filter: TextColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Contact method\",\r\n    accessor: \"contact_method\",\r\n    Filter: SelectContactColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Company\",\r\n    accessor: \"company\",\r\n    Filter: TextColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Deal size\",\r\n    accessor: \"deal_size\",\r\n    //  accessor: (originalRow) =>{ console.log(originalRow); return DateTime.fromFormat(originalRow.follow_up_date, 'yyyy-MM-dd HH:mm:ss').toMillis() },\r\n    // Cell: ({value}) => DateTime.fromFormat(value, 'yyyy-MM-dd HH:mm:ss').toFormat('dd/MM/yyyy'),\r\n    Filter: DateColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Follow Up Date\",\r\n    accessor: \"follow_up_date\",\r\n    //  accessor: (originalRow) =>{ console.log(originalRow); return DateTime.fromFormat(originalRow.follow_up_date, 'yyyy-MM-dd HH:mm:ss').toMillis() },\r\n    Cell: ({ value }) =>\r\n      DateTime.fromFormat(value, \"yyyy-MM-dd HH:mm:ss\").toFormat(\"dd/MM/yyyy\"),\r\n    Filter: DateColumnFilter,\r\n  },\r\n  {\r\n    Header: \"Edit contact\",\r\n    accessor: \"edit_contact\",\r\n    //  accessor: (originalRow) =>{ console.log(originalRow); return DateTime.fromFormat(originalRow.follow_up_date, 'yyyy-MM-dd HH:mm:ss').toMillis() },\r\n    Cell: ({ value }) => <Link to=\"/EditContact/1\">Edit</Link>,\r\n    Filter: DateColumnFilter,\r\n  },\r\n];\r\n\r\nconst managerColumns = [\r\n  {\r\n    Header: \"Name\",\r\n    accessor: \"name\",\r\n  },\r\n  {\r\n    Header: \"Email\",\r\n    accessor: \"email\",\r\n  },\r\n  {\r\n    Header: \"Role\",\r\n    accessor: \"role\",\r\n  },\r\n  {\r\n    Header: \"Status\",\r\n    accessor: \"status\",\r\n  },\r\n];\r\n\r\n//[\r\n// {\r\n//     Header: 'Leads',\r\n//     columns:\r\n\r\nconst Dashboard = ({ stages, contacts, role, staff }) => {\r\n  const [staffContacts, setStaffContacts] = useState([]);\r\n\r\n  let table;\r\n\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(role);\r\n    if (role !== \"\" && role !== \"manager\") {\r\n      const staffId = window.localStorage.getItem(\"staff_id\");\r\n      let filter = contacts.filter((e) => e.staff_id == staffId);\r\n\r\n      if (!isEqual(filter, staffContacts)) {\r\n        const data = filter.reduce((acumulator, currentValue) => {\r\n          const oldValue = acumulator[currentValue.stage] || 0;\r\n          return {\r\n            ...acumulator,\r\n            [currentValue.stage]: oldValue + currentValue.deal_size,\r\n          };\r\n        }, {});\r\n        console.log(data);\r\n        const chartDataArray = Object.keys(data).map((key) => ({\r\n          name: key,\r\n          value: data[key],\r\n        }));\r\n        //  console.log(chartDataArray);\r\n        setChartData(chartDataArray);\r\n        setStaffContacts(filter);\r\n      }\r\n    } else if (role === \"manager\") {\r\n      console.log(contacts);\r\n\r\n      //   const data = staff.reduce((acumulator, currentValue) => {\r\n      //     const oldValue = acumulator[currentValue.stage] || 0;\r\n      //     return {\r\n      //       ...acumulator,\r\n      //       [currentValue.stage]: oldValue + currentValue.deal_size,\r\n      //     };\r\n      //   }, {});\r\n      //   console.log(data);\r\n      //   const chartDataArray = Object.keys(data).map((key) => ({\r\n      //     name: key,\r\n      //     value: data[key],\r\n      //   }));\r\n      //   console.log(contacts);\r\n      //   setChartData(chartDataArray);\r\n      //  setStaffContacts(filter);\r\n    }\r\n  }, [chartData, contacts, role, staffContacts, stages]);\r\n\r\n  if (role !== \"\" && role === \"manager\") {\r\n    table = <ManagerTable columns={managerColumns} data={staff}></ManagerTable>;\r\n  }\r\n  if (role !== \"\" && role !== \"manager\") {\r\n    table = <Tabela columns={employeeColumns} data={staffContacts} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <FunnelChart data={chartData} />\r\n      {table}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}