{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\milos\\\\Desktop\\\\Faks\\\\test\\\\test\\\\src\\\\Components\\\\Tabela.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport { useFilters, useSortBy, useTable, useGlobalFilter } from 'react-table';\nimport { Table, Form } from 'react-bootstrap';\nimport '../styles/Tabela.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tabela({\n  columns,\n  data\n}) {\n  _s();\n\n  const [filterInput, setFilterInput] = useState('');\n\n  const handleFilterChange = e => {\n    const value = e.target.value;\n    setFilter('first_name', value);\n    setFilterInput(value);\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setFilter\n  } = useTable({\n    columns,\n    data\n  }, useFilters, useSortBy);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tabela\",\n    children: [/*#__PURE__*/_jsxDEV(Table, { ...getTableProps,\n      striped: true,\n      hover: true,\n      bordered: true,\n      size: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 44\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      className: \"search-bar\",\n      type: \"text\",\n      value: filterInput,\n      onChange: handleFilterChange,\n      placeholder: 'Search name'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), headerGroups.map(headerGroup => headerGroup.headers.map(column => column.canFilter ? column.render('Filter') : null))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tabela, \"hAlhgpvOMtZZlv/4uVCyjDiryho=\", false, function () {\n  return [useTable];\n});\n\n_c = Tabela;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tabela\");","map":{"version":3,"sources":["C:/Users/milos/Desktop/Faks/test/test/src/Components/Tabela.js"],"names":["React","useMemo","useState","useFilters","useSortBy","useTable","useGlobalFilter","Table","Form","Tabela","columns","data","filterInput","setFilterInput","handleFilterChange","e","value","target","setFilter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","canFilter"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react'\r\n\r\nimport {useFilters, useSortBy, useTable, useGlobalFilter} from 'react-table'\r\n\r\nimport { Table, Form } from 'react-bootstrap'\r\nimport '../styles/Tabela.css'\r\n\r\n\r\nexport default function Tabela({ columns, data }) {\r\n    const [filterInput, setFilterInput] = useState('');\r\n\r\n    const handleFilterChange = e => {\r\n        const value = e.target.value;\r\n        setFilter('first_name', value);\r\n        setFilterInput(value);\r\n    }\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        setFilter\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    },\r\n        useFilters,\r\n        useSortBy\r\n    )\r\n    return(\r\n        <div className=\"tabela\">\r\n            <Table {...getTableProps} striped hover bordered size=\"sm\">\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>\r\n                                    {column.render(\"Header\")}\r\n                                    </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n            <Form.Control  className='search-bar' type=\"text\" value={filterInput} onChange={handleFilterChange} placeholder={'Search name'} />\r\n            {headerGroups.map(headerGroup => (\r\n                headerGroup.headers.map(column =>(\r\n                    column.canFilter ? column.render('Filter') : null\r\n                ))\r\n            ))}\r\n        </div>\r\n\r\n       \r\n    )\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}